// Benchmark boilerplate generated by Benchmark

import Benchmark
import ExtrasJSON
import GraphQL
import IkigaJSON
import Foundation

let map: Map = .dictionary([
    "bool": .bool(true),
    "number": .number(1),
    "string": .string("hello world"),
    "null": .null,
    "undefined": .undefined,
    "array": .array([
        .number(1),
        .string("hello world"),
        .null,
    ]),
    "dictionary": .dictionary([
        "number": .number(1),
        "string": .string("hello world"),
        "null": .null,
        "undefined": .undefined,
    ]),
])

let graphQLJSONEncoder = GraphQLJSONEncoder()
let foundationJSONEncoder = JSONEncoder()
let ikigaJSONEncoder = IkigaJSONEncoder()
let extrasJSONEncoder = XJSONEncoder()

let benchmarks = {
    Benchmark("GraphQLJSONEncoder") { benchmark in
        try blackHole(graphQLJSONEncoder.encode(map))
    }
    Benchmark("FoundationJSONEncoder") { benchmark in
        try blackHole(foundationJSONEncoder.encode(map))
    }
    Benchmark("IkigaJSONEncoder") { benchmark in
        try blackHole(ikigaJSONEncoder.encode(map))
    }
    // Fails
//    Benchmark("ExtrasJSONEncoder") { benchmark in
//        try blackHole(extrasJSONEncoder.encode(map))
//    }
}
