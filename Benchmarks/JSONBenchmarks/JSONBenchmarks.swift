// Benchmark boilerplate generated by Benchmark

import Benchmark
import ExtrasJSON
import GraphQL
import IkigaJSON
import Foundation

let map: Map = .dictionary([
    "bool": .bool(true),
    "number": .number(1),
    "string": .string("hello world"),
    "null": .null,
    "undefined": .undefined,
    "array": .array([
        .number(1),
        .string("hello world"),
        .null,
    ]),
    "dictionary": .dictionary([
        "bool": .bool(true),
        "number": .number(1),
        "string": .string("hello world"),
        "null": .null,
        "undefined": .undefined,
    ]),
])

let data = """
{
    "bool": true,
    "number": 1,
    "string": "hello world",
    "null": null,
    "array": [
        1,
        "hello world",
        null
    ],
    "dictionary": {
        "bool": true,
        "number": 1,
        "string": "hello world",
        "null": null
    }
}
""".data(using: .utf8)!


let graphQLJSONEncoder = GraphQLJSONEncoder()
let foundationJSONEncoder = JSONEncoder()
let foundationJSONDecoder = JSONDecoder()
let ikigaJSONEncoder = IkigaJSONEncoder()
let ikigaJSONDecoder = IkigaJSONDecoder()
let extrasJSONEncoder = XJSONEncoder()

let benchmarks = {
    // Encoders
    Benchmark("Encoder - GraphQL") { benchmark in
        try blackHole(graphQLJSONEncoder.encode(map))
    }
    Benchmark("Encoder - Foundation") { benchmark in
        try blackHole(foundationJSONEncoder.encode(map))
    }
    Benchmark("Encoder - IkigaJSON") { benchmark in
        try blackHole(ikigaJSONEncoder.encode(map))
    }
    // Fails
//    Benchmark("ExtrasJSONEncoder") { benchmark in
//        try blackHole(extrasJSONEncoder.encode(map))
//    }
    
    // Decoders
    Benchmark("Decoder - Foundation") { benchmark in
        try blackHole(foundationJSONDecoder.decode(Map.self, from: data))
    }
    Benchmark("Decoder - IkigaJSON") { benchmark in
        try blackHole(ikigaJSONDecoder.decode(Map.self, from: data))
    }
}
